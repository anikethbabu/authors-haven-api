#!/bin/bash

# Exits immediatley if there is an error
set -o errexit

# Considers pipeline is failed if one command fails. 
set -o pipefail

# Exits script if any uninitialized variable is used
set -o nounset

# Incase you don't have postgres user. Sets POSTGRES_USER to postgres.
if [ -z "${POSTGRES_USER}" ]; then
    base_postgres_image_default_user='postgres'
    export POSTGRES_USER="${base_postgres_image_default_user}"
fi

# Creating database url with .postgres environment file
export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"

# Runs python script to check if the database is available. If it can connect it will end if END otherwise it will show an error after 30 seconds.
python << END
import sys
import time
import psycopg2
suggest_unrecoverable_after = 30
start = time.time()
while True:
    try:
        psycopg2.connect(
            dbname="${POSTGRES_DB}",
            user="${POSTGRES_USER}",
            password="${POSTGRES_PASSWORD}",
            host="${POSTGRES_HOST}",
            port="${POSTGRES_PORT}",
        )
        break
    except psycopg2.OperationalError as error:
        sys.stderr.write("Waiting for PostgreSQL to become available.. \n")
        if time.time() - start > suggest_unrecoverable_after:
            sys.stderr.write(" This is taking longer than expected. The following exception may be indicative of an unrecoverable errror: '{}' \n".format(error))
    time.sleep(1)
END

>&2 echo "PostgreSQL is available"

# Executes command passed as arguments to the shell script. $@ represents all arguments passed to the script
exec "$@"
